plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco' // jacoco 를 사용할 수 있게 import 한다고 이해하면 될 듯!
}

jar.enabled = false

group = 'toy'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // 레디스 적용
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // 마이크로미터 프로메테우스 구현 라이브러리 추가
    implementation 'io.micrometer:micrometer-registry-prometheus'


}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8" // 버전 명시
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn test // 리포트 생성 전에 test를 반드시 수행해야 한다!
    reports { // 어떤 파일들을 생성할지, 어디에 생성할지 설정
        xml.required = true // xml과 html형식으로 결과물을 만들어내라!
        html.required = true
        // 경로 명시 안 할 경우 기본 경로는 build/reports/jacoco 이하 경로
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                //minimum = 0.20
            }
            // 커버리지 체크를 제외할 클래스들
            excludes = ['*.*Controller', '*.*Dto']
        }
        rule {
            element = 'CLASS'
            enabled = true
            // 커버리지 체크를 제외할 클래스들
            excludes = ['*.*Controller', '*.*Dto']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                //minimum = 0.01
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                //minimum = 0.01
            }

        }
    }
}





