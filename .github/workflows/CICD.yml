# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle and Jacoco

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Git Project Clone
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
        with:
          arguments: build
      - name: 테스트 커버리지를 PR에 코멘트로 등록합니다
        id: jacoco
        uses: madrapps/jacoco-report@v1.2
        with:
          title: 📝 테스트 커버리지 리포트입니다
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.SECRET }}
          min-coverage-overall: 50
          min-coverage-changed-files: 50
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: toy-login-artifact
          path: build/libs/*.jar

  deploy:
    needs: build

    if: github.event_name != 'pull_request'

    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: toy-login-artifact
      - name: Display structure of downloaded files
        run: |
          ls -R
          pwd
      # 깃허브 액션 러너의 아이피를 얻어온다.
      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.TOY_LOGIN_SSH_PRIVATE_KEY }}
      - name: Github actions IP keygen reset
        run: |
          echo ${{ steps.ip.outputs.ipv4 }}
          cat /home/runner/.ssh/known_hosts
      #      - name: SSH key add
      #        run: |
      #          echo "$SSH_PRIVATE_KEY" > /home/runner/.ssh/private.key
      #          sudo chmod 600 /home/runner/.ssh/private.key
      #          echo "$SSH_KNOWN_HOSTS" > /home/runner/.ssh/known_hosts
      #          sudo chmod 600 /home/runner/.ssh/known_hosts
      #          cat /home/runner/.ssh/known_hosts
      #        shell: bash
      #        env:
      #          SSH_PRIVATE_KEY: ${{secrets.TOY_LOGIN_SSH_PRIVATE_KEY}}
      #          SSH_KNOWN_HOSTS: ${{secrets.SSH_USER}}
      - name: SCP transfer
        run: |
          scp -P ${{ secrets.SERVER_PORT }} *.jar ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/cicd

      #          cat /home/runner/.ssh/known_hosts
      #           ssh-keygen -R ${{ steps.ip.outputs.ipv4 }}
      #      - name: copy file to server
      #        uses: appleboy/scp-action@v0.1.4
      #        with:
      #          host: ${{ secrets.SERVER_IP }}
      #          username: ${{ secrets.SERVER_USER }}
      #          key: ${{ secrets.TOY_LOGIN_SSH_PRIVATE_KEY }}
      #          port: ${{ secrets.SERVER_PORT }}
      #          source: "./*.jar"
      #          target: "/home/project"
      #          script: |
      #            pwd
      #            ls -all
      #      - name: executing remote ssh commands server stop and restart
      #        uses: appleboy/ssh-action@master
      #        with:
      #          host: ${{ secrets.SERVER_IP }}
      #          username: ${{ secrets.SERVER_USER }}
      #          #          password: ${{ secrets.SERVER_PW }}
      #          key: ${{ secrets.SSH_PRIVATE_KEY }}
      #          port: ${{ secrets.SERVER_PORT }}
      #          script: |
      #            cd /home/project
      #            sh deploy.sh